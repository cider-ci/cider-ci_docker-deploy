#!/usr/bin/env bash
set -eux

WD=$(pwd)

CIDER_CI_SOURCE_DIR="$WD/.."

BUILD_DIR=$WD/tmp/server

DOCKER_NAME=server
DOCKER_PREFIX='cider-ci'
DOCKER_DIR=$(pwd)
DOCKER_TAG='latest'

function buildConfigDir {
  mkdir -p $BUILD_DIR/config
  cp $CIDER_CI_SOURCE_DIR/config/config_default.yml $BUILD_DIR/config/config_default.yml
  cp $CIDER_CI_SOURCE_DIR/config/releases.yml $BUILD_DIR/config/releases.yml
}

function copyGitRepoFiles {
  DIR_NAME=$1
  mkdir -p $BUILD_DIR/$DIR_NAME
  cd $CIDER_CI_SOURCE_DIR/$DIR_NAME
  $WD/bin/git-archive-all -- - | tar x --directory $BUILD_DIR/$DIR_NAME
}

function buildDocumentationDir {
  copyGitRepoFiles documentation
}

function buildRailsServices {
  for SERVICE in user-interface ; do
    copyGitRepoFiles $SERVICE
  done
}

function buildLeinService {
  SERVICE_NAME=$1
  mkdir -p $BUILD_DIR/$SERVICE_NAME
  cd $CIDER_CI_SOURCE_DIR/$SERVICE_NAME
  VERSION=$(lein cider-ci_dev version)
  lein clean
  lein uberjar
  cp target/$SERVICE_NAME-$VERSION-standalone.jar $BUILD_DIR/$SERVICE_NAME/$SERVICE_NAME.jar
  cat target/$SERVICE_NAME-$VERSION-standalone.jar \
    | openssl  dgst -sha256 \
    | cut -d' ' -f2- \
    > $BUILD_DIR/$SERVICE_NAME/$SERVICE_NAME.jar.sha256
}

function buildLeinServices {
  for SERVICE in api builder dispatcher executor notifier repository storage; do
    buildLeinService $SERVICE
  done
}

function buildDownloads {
  mkdir -p $BUILD_DIR/downloads
  cd $BUILD_DIR/downloads
  ln  -s ../executor/ executor
  cd $WD
}

function reBuild {
  rm -rf $BUILD_DIR
  buildConfigDir
  buildDocumentationDir
  buildRailsServices
  buildLeinServices
  buildDownloads
}

### MAIN ######################################################################

reBuild

cd $WD

docker build -t "$DOCKER_PREFIX/$DOCKER_NAME:$DOCKER_TAG" \
  -f $DOCKER_DIR/$DOCKER_NAME.dockerfile $DOCKER_DIR
